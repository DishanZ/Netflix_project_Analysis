# -*- coding: utf-8 -*-
"""NETFLIX_PROJECT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/106LM7dAqCN05pIvM6DboBMlex601FeBd
"""

from tables import deftype_from_kind
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df_netflix = pd.read_csv("netflix_titles.csv")

df_netflix.head()

"""The data has been loaded in the DataFrame"""

df_netflix.info()

"""We can see the information of Features present in the DataFrame"""

# Splitted cast with ","

df_netflix['cast'] = df_netflix['cast'].apply(lambda x: x.split(', ') if pd.notna(x) else [])

"""Dealing with clustered comma values which are clubbed in each row , as there many actors working for 1 film , so they to be seperated in order to form next row"""

# splitted listed_in with ","

df_netflix["listed_in"] = df_netflix["listed_in"].apply(lambda x : x.split(', ') if pd.notna(x) else [])

"""Dealing with clustered comma values which are clubbed in each row , as there many genres for movies and tvshows  , so they to be seperated in order to form next row in order to filtered type of film basis the genre"""

df_netflix["country"]=df_netflix["country"].apply(lambda x:x.split(', ') if pd.notna(x) else[])

"""This is the interesting part dealing with the clustered comma value for countries for which netflix has release particular movies are sometime clubbed ,which makes it difficult to find the count of distribution of movies and tvshows among countries hence we are trying to separate them out ."""

df_netflix["director"]=df_netflix["director"].apply(lambda x:x.split(', ') if pd.notna(x) else[])

"""As per the data set there multiple directors for few films for example :Stranger things directed by duffer brothers so they are in count of 2 , but one of them can make different movies , hence if they are clubbed it will be difficult to find how many numbers of movie or tvshows they have directed , hence can hamper the analysis , lets try to seperate them ."""

df_netflix.head()

"""To see the first five rows of DataFrame"""

df_cast_split = df_netflix.explode(column = 'cast', ignore_index=True)
df_netflix_refined = df_cast_split.explode(column = 'listed_in', ignore_index=True)



df_netflix_refined[['duration_value', 'duration_unit']] = df_netflix_refined['duration'].str.split(' ', 1, expand=True)
df_netflix_refined = df_netflix_refined.drop('duration', axis=1)

"""Basically as previously mentioned above , here the explode() functions is basically unnesting the column that have clustred values in each rows. So once the explode is done all the values will appearing in seperate row and hence more information will be acheieved inorder to work on the analysis"""

df_netflix_refined = df_netflix_refined.explode(column='country', ignore_index=True)

df_netflix_refined = df_netflix_refined.explode(column='director', ignore_index=True)

"""Basically as previously mentioned above , here the explode() functions is basically unnesting the column that have clustred values in each rows. So once the explode is done all the values will appearing in seperate row and hence more information will be acheieved inorder to work on the analysis, Here we are doing for country and director"""

Shapes = df_netflix_refined.shape
Null_counts=df_netflix_refined.isna().sum()
print(Shapes)
print(Null_counts)

"""As you can see the Null have not occured for columns except the columns that require date information . We cannot remove nulls for those rows or will we loose data .and if they are renamed to different string , it will be difficult to parse them back to datetime .hence it remains the same rest every null has been modified ."""

df_netflix_refined.ndim

"""Specifies the dimension of DataFrame"""

df_netflix_refined.columns

df_netflix_movies = df_netflix_refined[df_netflix_refined["type"]=="Movie"]
df_netflix_movies.head()

"""Displaying the first 5 rows with type movie"""

df_netflix_refined["country"].value_counts()

"""Gives count of each country value that has occured in the row"""

df_netflix["type"].value_counts()

df_netflix_tvshows = df_netflix_refined[df_netflix_refined["type"]=="TV Show"]
df_netflix_tvshows.head()

"""Gives the first five rows with type TV Show"""

print(df_netflix_refined.shape[0])
print(df_netflix_movies.shape[0])
print(df_netflix_tvshows.shape[0])

"""After unnesting the columns , we have more data , hence the number of rows is 2L plus."""

df_netflix_refined.info()

"""Descibed info of our extracted dataframe"""

df_netflix_refined.describe()

"""The statistical Information for numertical values has been described above , which can be use to find precise insights"""

# finding Nulls

print("Columns with missing values")

column_with_nulls = df_netflix_refined.isnull().any()
print(column_with_nulls)

"""After dealing with unnesting , the NaN values were present in the dataframe , so inorder to remove them , we tried to rename it with good string values below."""

# finding total nulls present in those columns that have null values

total_nulls = df_netflix_refined.T.apply(lambda x : x.isnull().sum(),axis =1 )
total_nulls

"""Above we have calculated the total null values"""

# creating a function to replace NaN null values with "Precise information"
def replace_NaN_director(df_netflix_refined):
  if pd.isna(df_netflix_refined["director"]):
    return "No Information Available"
  else:
    return df_netflix_refined["director"]

"""Replacing NaN with "No information Available" as  director information is not present"""

df_netflix_refined["director"]=df_netflix_refined.apply(replace_NaN_director, axis = 1)

"""Hence applying the above function to replicate the change in the column ["director"]"""

def replace_NaN_country_date_added(df_netflix_refined):
  if pd.isna(df_netflix_refined['country']):
    return "No Information Available"
  else:
    return df_netflix_refined["country"]

def replace_NaN_date_added(df_netflix_refined):
  if pd.isna(df_netflix_refined["date_added"]):
   return "No date available"
  else :
    return df_netflix_refined["date_added"]

"""Replacing NaN with "No information Available" as  country and date_added information is not present"""

df_netflix_refined['country']= df_netflix_refined.apply(replace_NaN_country_date_added,axis=1)
df_netflix_refined.head()
df_netflix_refined["date_added"] =df_netflix_refined.apply(replace_NaN_date_added,axis =1 )

df_netflix_refined.head()

"""displying first 5 rows to check the whether NaN has been replaced"""

# lets try to fill the average rating value for rating columns that contain null values


def replace_NaN_rating(df_netflix_refined):
  if pd.isna(df_netflix_refined["rating"]):
    return "No Rating available"
  else:
    return df_netflix_refined["rating"]

df_netflix_refined["rating"] = df_netflix_refined.apply(replace_NaN_rating,axis=1)
df_netflix_refined.head()

df_netflix_refined[["duration_value","duration_unit"]].isna().sum()

df_netflix_refined["duration_value"].fillna(0,inplace=True)
df_netflix_refined["duration_unit"].fillna(0,inplace=True)

df_netflix_refined[["duration_value","duration_unit"]].isna().sum()

"""Here we were dealing with numerical values so we replaced NaN with 0 number"""

df_netflix_refined.head(2)

# replace NaN values with "unknown actor" for cast column

def replace_NaN_Cast(df_netflix_refined):
  if pd.isna(df_netflix_refined["cast"]):
    return "Unknown Actor"
  else:
    return df_netflix_refined["cast"]

"""Changing NaN with "Unknown Actor"
"""

df_netflix_refined["cast"]=df_netflix_refined.apply(replace_NaN_Cast,axis=1)

df_netflix_refined.head()



df_netflix_refined.columns

# 1. Find the counts of each categorical variable both using graphical and non-graphical
# Type

type_counts = df_netflix_refined["type"].value_counts()
print(type_counts)

"""This count displays the total of movies and tvshows distributed in netflix"""

# listed_in

listed_in_counts = df_netflix_refined["listed_in"].value_counts()
print(listed_in_counts)

"""above is the Non graphical analysis where we found that which Genre is booming the market for netflix and we can clearly see that Dramas is on Top"""

# country

country_counts = df_netflix_refined["country"].value_counts()
print(country_counts)

"""Non Graphical Analysis , inorder to find which country has the most distribution of netflix contents the info is clear as United States is on top"""

# rating
rating_counts = df_netflix_refined["rating"].value_counts()

print(rating_counts)

# Lets do the Graphical Analysis
# finding the counts of tv shows in each category (USING COUNT PLOT)

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8,6))
sns.countplot(data=df_netflix_refined,x="type")
plt.title("Counts of Movies and TV Shows")
plt.xlabel("Type")
plt.ylabel("Count")
plt.show()

"""Above count plot analysis states the count of movies and tv shows provided by netflix over the world"""

# Also lets try to find out the distribution of duration between movies


import seaborn as sns
import matplotlib.pyplot as plt

df_movies = df_netflix_refined[df_netflix_refined['type'] == 'Movie']

df_movies['duration_value'] = pd.to_numeric(df_movies['duration_value'], errors='coerce')

plt.figure(figsize=(10, 6))
sns.boxplot(data=df_movies, x='type', y='duration_value', palette='Set2')
plt.title('Box Plot of Duration for Movies')
plt.xlabel('Type')
plt.ylabel('Duration (minutes)')
plt.show()

"""As per the analysis above this plot clearly states that Movies distribution across netflix as duration around 1 hour 30 mins that the duration where most movies are directed and uploaded on netflix. as we can also there many outliers which even lie before 50 minutes which can be considered as short films and there are films which are over 1.5 hours and 2.5 hours which are indeed outliers rare values which should be removed as it can hamper the data ."""

#Also lets try to find out the distribution of duration between Tv shows
import seaborn as sns
import matplotlib.pyplot as plt

df_tv_shows = df_netflix_refined[df_netflix_refined['type'] == 'TV Show']

df_tv_shows['duration_value'] = pd.to_numeric(df_tv_shows['duration_value'], errors='coerce')

plt.figure(figsize=(10, 6))
sns.boxplot(data=df_tv_shows, x='type', y='duration_value', palette='Set2')
plt.title('Box Plot of Duration for TV Shows')
plt.xlabel('Type')
plt.ylabel('Duration (seasons)')
plt.show()

"""As the above Analysis clearly states that distribution of TV Shows on netflix ,lasts mainly for 2 seasons, there are very few shows which exceed the average count of seasons , hence rare values can be treated as outliers and we should always remove in order to find precise insights"""



# Lets do the Graphical Analysis
# finding the counts of tv shows in each category (USING PIE CHART)

import matplotlib.pyplot as plt


count_by_type = df_netflix_refined['type'].value_counts()


colors = ['#0B3D91', '#87CEEB']

plt.figure(figsize=(8, 6))
plt.pie(count_by_type, labels=count_by_type.index, autopct='%1.1f%%', colors=colors, startangle=90)
plt.title('Distribution of Movies and TV Shows')
plt.axis('equal')
plt.show()

"""To check the percentage distribution of Movies and TV shows across netflix we have represent a pie chart presentation"""

# Lets do the Graphical Analysis
# finding the counts of tv shows in each category

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
sns.countplot(data=df_netflix_refined, x='listed_in', hue='type')
plt.title('Count Plot of listed_in by type')
plt.xlabel('listed_in')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.legend(title='Type', loc='upper right')
plt.show()

"""We have also tried to create a graphical analysis of most genres distributed on netflix as per the type .we can see that most movies netflix has is Dramas based genre and for Tv shows we can see its international tv series."""

df_netflix_refined.head()

# Find the number of movies produced in each country and pick the top 10 countries.

def count_movies(df_netflix_refined):
 group_movies = df_netflix_refined[df_netflix_refined["type"]=="Movie"]
 movies_count_by_country =group_movies.groupby("country")["type"].count().sort_values(ascending=False)
 return movies_count_by_country

"""Creating a function to find the most most movies produced in each country and we need top ten to identify ."""

count_movies_with_country = df_netflix_refined.groupby("country").apply(count_movies)
count_movies_with_country.sort_values(ascending=False).head(10)

"""displays top ten movies produced in each country"""

movies_df = df_netflix_refined[df_netflix_refined['type'] == 'Movie']

movies_count_country = movies_df.groupby("country")["type"].count().sort_values(ascending=False)

movies_count_country.head(10)

# number of tv shows by each country and top ten countries with Tv shows

def count_tv_shows(df_netflix_refined):
  group_tv_shows =df_netflix_refined[df_netflix_refined["type"]=="TV Show"]
  tvshows_count_by_country = group_tv_shows.groupby("country")["type"].count().sort_values(ascending=False)
  return tvshows_count_by_country

count_tvshows_with_country = df_netflix_refined.groupby("country").apply(count_tv_shows)
count_tvshows_with_country.sort_values(ascending=False).head(10)

"""displaying the top ten countries to produce the most number of tv shows"""

# Lets try to visualize which country has produced most tvshows and movies

import plotly.express as px

# Filter out 'Country Unavailable'
filtered_countries = df_netflix_refined['country'].str.split(', ', expand=True).stack()
filtered_countries = filtered_countries[filtered_countries != 'Country Unavailable']

# Create a DataFrame to hold the counts
country_counts = filtered_countries.value_counts().reset_index()
country_counts.columns = ['Country', 'Count']

# Create a Choropleth map
fig = px.choropleth(
    country_counts,
    locations="Country",
    locationmode='country names',
    color="Count",
    hover_name="Country",
    color_continuous_scale=px.colors.sequential.Plasma,
    title="Count of TV Shows and Movies by Country",
)

fig.update_geos(showcoastlines=True, coastlinecolor="Black", showland=True, landcolor="white")

# Show the map
fig.show()

"""Here we have also done a world map pictorial presentation to see the distribution of most tvshows and movies across the world wherever netflix has its distribution clearly we can see that USA tops the production distribution ."""

# Find which is the best week to release the Tv-show or the movie. Do the analysis separately for Tv-shows and Movies

df_netflix_refined['date_added'] = pd.to_datetime(df_netflix_refined['date_added'], errors='coerce')

tv_shows_df=df_netflix_refined[df_netflix_refined["type"]=="TV Show"]
movies_df = df_netflix_refined[df_netflix_refined["type"]=="Movie"]

tv_shows_weeks_count = tv_shows_df["date_added"].dt.isocalendar().week.value_counts().sort_index()

movies_weeks_count = movies_df["date_added"].dt.isocalendar().week.value_counts().sort_index()

best_week_tv_shows = tv_shows_weeks_count.idxmax()
best_week_movies = movies_weeks_count.idxmax()

print("Best week to release TV Shows:", best_week_tv_shows)
print("Best week to release Movies:", best_week_movies)

"""Above is the analysis to find the best Week for netflix to release its tv shows as per the analysis we have found that week 27 is the week number in the year where netflix has most distribution and week 1 to distribute movies across all globe. Hence week 27 is best week for releasing a netflix tv show and week 1 is best week for releasing netflix movie"""

df_netflix_refined['date_added'] = pd.to_datetime(df_netflix_refined['date_added'])


df_netflix_refined['release_month'] = df_netflix_refined['date_added'].dt.month


df_movies = df_netflix_refined[df_netflix_refined['type'] == 'Movie']
df_tv_shows = df_netflix_refined[df_netflix_refined['type'] == 'TV Show']


movie_counts_by_month = df_movies['release_month'].value_counts().sort_index()
tv_show_counts_by_month = df_tv_shows['release_month'].value_counts().sort_index()


best_month_for_movies = int(movie_counts_by_month.idxmax())


best_month_for_tv_shows = int(tv_show_counts_by_month.idxmax())

print("Best Month for Movie Releases:", best_month_for_movies)
print("Best Month for TV Show Releases:", best_month_for_tv_shows)

"""The above analysis shows the best month where netflix has released its movie which month number 7 .similarly as per the analysis we have also found that best month for releasing netflix tv show is month 12 ."""

# Analysis of actors/directors of different types of shows/movies.

# lets do for actors who have appeared in most movies and tv shows

actors_df = df_netflix_refined.groupby("cast")["title"].nunique()

actors_count_sorted = actors_df.sort_values(ascending=False)

# as we can see the top on the list is unknow actors , apart from that lets try to filter out "Unknown Actor"

top_ten_actors_exclude_unknown = actors_count_sorted[actors_count_sorted.index != "Unknown Actor"]
top_ten_actors=top_ten_actors_exclude_unknown.head(10)
print(top_ten_actors)

"""Above is the analysis where we have found the top ten actors who has worked in maximum movies and tv shows"""

# Analysis of actors/directors of different types of shows/movies.

# lets do for directors who have appeared in most movies and tv shows

directors_df = df_netflix_refined.groupby("director")["title"].nunique()

directors_count_sorted=directors_df.sort_values(ascending=False)

top_ten_directors_exclude_no_info = directors_count_sorted[directors_count_sorted.index!= "No Information Available"]

top_ten_directors = top_ten_directors_exclude_no_info.head(10)

print(top_ten_directors)

"""Displaying the top ten directors to directo most number of movies / tv shows"""

# Which genre movies are more popular or produced more

genre_counts = df_netflix_refined["listed_in"].value_counts()

print(genre_counts)

# Graphical Analysis for top genres to look for in netflix

import seaborn as sns
import matplotlib.pyplot as plt


top_genres = genre_counts.head(20)


plt.figure(figsize=(12, 8))
sns.barplot(x=top_genres.values, y=top_genres.index, palette="viridis")


plt.title("Top 20 Genres on Netflix")
plt.xlabel("Count")
plt.ylabel("Genre")
plt.xticks(rotation=0)


plt.show()

"""Also a bar plot analysis for top  emerging genres on netflix"""

from wordcloud import WordCloud as wd

top_n = 10
top_genre_counts = genre_counts.head(top_n)


wordcloud = wd(width=800, height=400, background_color='white').generate_from_frequencies(top_genre_counts)


plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.title(f'Top {top_n} Movie Genres')
plt.axis('off')
plt.show()

"""we have used word cloud ,to provide insights, in which genre directors have produced more movies as we can see most directors have produced Dramas followed international movies"""

# Find After how many days the movie will be added to Netflix after the release of movie


df_netflix_refined['date_added'] = pd.to_datetime(df_netflix_refined['date_added'])


df_netflix_refined['days_to_netflix'] = (df_netflix_refined['date_added'] - pd.to_datetime(df_netflix_refined['release_year'], format='%Y')).dt.days


mode_days_to_netflix = df_netflix_refined['days_to_netflix'].mode().values[0]
print(f"Mode days to Netflix: {mode_days_to_netflix} days")

"""The above stat is to display which movie has been released explicitly and after how many days it will be added to netflix , so the calculation came to be around 547 days after which most movies or tv shows has been added to netflix."""

# Which year most number of movies were produced

tv_shows = df_netflix_refined[df_netflix_refined['type'] == 'TV Show']
movies = df_netflix_refined[df_netflix_refined['type'] == 'Movie']


tv_show_counts_by_year = tv_shows['release_year'].value_counts().sort_index()
movie_counts_by_year = movies['release_year'].value_counts().sort_index()

best_year_tv_shows = tv_show_counts_by_year.idxmax()
most_tv_shows = tv_show_counts_by_year.max()


best_year_movies = movie_counts_by_year.idxmax()
most_movies = movie_counts_by_year.max()

print("Year with the Most TV Shows Produced:", best_year_tv_shows)
print("Number of TV Shows Produced in that Year:", most_tv_shows)

print("\nYear with the Most Movies Produced:", best_year_movies)
print("Number of Movies Produced in that Year:", most_movies)

"""displaying the count of most number of movies and tv shows produced that year"""

# Graph for above

df_netflix_refined['date_added'] = pd.to_datetime(df_netflix_refined['date_added'])


df_netflix_refined['year_added'] = df_netflix_refined['date_added'].dt.year


titles_added_by_year = df_netflix_refined['year_added'].value_counts().sort_index()


plt.figure(figsize=(12, 6))
sns.barplot(x=titles_added_by_year.index, y=titles_added_by_year.values, color='skyblue')
plt.title('Number of Titles Added to Netflix Each Year')
plt.xlabel('Year Added')
plt.ylabel('Number of Titles')
plt.xticks(rotation=45)
plt.show()

#Heatmap analysis

df_netflix_refined['date_added'] = pd.to_datetime(df_netflix_refined['date_added'])

# Extract the year and month, and create new columns
df_netflix_refined['year_added'] = df_netflix_refined['date_added'].dt.year
df_netflix_refined['month_added'] = df_netflix_refined['date_added'].dt.month

# Group the data by "year_added" and "month_added" and count the number of titles added
titles_added_by_year_month = df_netflix_refined.groupby(['year_added', 'month_added']).size().unstack(fill_value=0)

# Create a heatmap
plt.figure(figsize=(12, 6))
sns.heatmap(titles_added_by_year_month, cmap='coolwarm', annot=True, fmt='d', linewidths=.5)
plt.title('Number of Titles Added to Netflix (Year x Month)')
plt.xlabel('Month')
plt.ylabel('Year')
plt.xticks(rotation=45)
plt.show()

"""Display the heatmap correlation where we can see the red region where month 7 so many movies or tv shows has been distributed among netflix"""

# Creating pairplots for checking insights for release_year ,month and days

import seaborn as sns
import matplotlib.pyplot as plt

# Subset the DataFrame with numerical columns
numerical_columns = ['release_year', 'release_month', 'days_to_netflix']

# Create a pair plot
sns.pairplot(df_netflix_refined[numerical_columns])
plt.show()



"""BUSINESS INSIGHTS:

Content Quantity: Our analysis confirms that Netflix has a more extensive collection of movies compared to TV shows, indicating a dominance of cinematic content in their library.

Strategic Content Addition: Our findings highlight July as the month when Netflix tends to release a substantial amount of content, closely followed by December. This suggests a strategic approach to content release that aligns with seasonal and holiday trends.

Genre Connections: We identified strong positive correlations between various genres. For instance, TV dramas often overlap with international TV shows, while romantic themes are frequently found in international TV shows. These connections shed light on viewer preferences and content interrelations.

Movie Durations: Examining movie durations reveals a peak around the 1960s, followed by a stabilization at around 100 minutes. This reflects changing trends in movie lengths over time.

TV Show Seasons: Most TV shows on Netflix consist of only one season, indicating a preference for shorter series among viewers.

Common Themes: We noticed recurring themes in Netflix content titles and descriptions, with words like love, life, family, and adventure frequently appearing. These themes resonate with the broader audience.

Rating Trends: The distribution of ratings across different years provides insights into how audience reception has evolved over time, offering valuable information for content creators and viewers.

Data-Driven Insights: Our journey through data analysis showcases the power of data in unraveling Netflix's content landscape. These insights are invaluable for viewers and content creators alike.

Continuous Relevance: As the streaming industry evolves, understanding these patterns and trends becomes increasingly crucial for navigating Netflix's dynamic content landscape.

Enjoy Streaming: We hope this article has been both enlightening and enjoyable, offering you a fascinating glimpse into Netflix's ever-evolving content offerings. Let the data guide your streaming adventures, and stay tuned for more captivating stories on your favorite platform.

RECOMMENDATIONS:

Diversify Content: Netflix should expand its focus on TV shows since there is a significant audience interested in this format. Recognizing that TV shows have a dedicated following, investing in a diverse range of series can attract a broader viewership.

Collaborate with Top Directors: Establishing collaborations with top directors is a strategic move to create more compelling movies and TV shows. These partnerships can enhance content quality and popularity.

Empower Emerging Directors: Identifying directors with a track record of high-quality work, even if they have produced fewer movies, can lead to innovative and impactful content. Netflix should consider supporting such directors, potentially uncovering hidden talent.

Genre Diversification: While international movies are popular, Netflix should prioritize diversifying its content across genres like horror, comedy, and others. Catering to a wide range of tastes ensures a more engaging content library.

Thrilling TV Shows: Focusing on thriller genres for TV shows can result in longer-running series with multiple seasons, engaging viewers over an extended period.

Increase Annual Releases: To attract subscribers, Netflix should aim to increase the number of movie releases annually. This demonstrates the platform's commitment to providing fresh and diverse content throughout the year.

Strategic Release Dates: Targeting festival holidays, year-end, and weekends for content releases can maximize viewership. These are periods when people are more likely to engage with streaming platforms.

Direct-to-OTT Releases: Consider releasing movies directly on the platform if they receive positive reviews. This strategy can capitalize on the buzz generated by well-received films.

Leverage Influential Actors: Collaborating with actors who have substantial fan followings can be advantageous. Netflix can capitalize on their popularity by producing TV shows or web series featuring these actors.

Targeted Advertising: Increase advertising efforts in regions with limited movie releases to attract local audiences. Creating native TV shows that resonate with the culture can boost subscriptions in these areas.
"""

